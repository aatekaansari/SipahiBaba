<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Khan Ka Samsi Noori Zahangir</title>
  <link rel="manifest" href="/manifest.json">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #ffebee;
      color: #333;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      overflow: hidden;
    }
    header {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background-color: #00695c;
      border-bottom: 1px solid #4db6ac;
      z-index: 1000;
    }
    .header-box {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 10px 20px;
    }
    .header-left {
      display: flex;
      align-items: center;
    }
    .logo-preview {
      width: 60px;
      height: 60px;
      border-radius: 10px;
      overflow: hidden;
      border: 1px solid #80cbc4;
    }
    .logo-preview img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    .text-content {
      margin-left: 10px;
      text-align: center;
    }
    .text-content h1 {
      margin: 0;
      font-size: 18px;
      color: #fff;
      letter-spacing: 0.5px;
    }
    .text-content p {
      margin: 4px 0 0;
      font-size: 14px;
      color: #eee;
    }
    .control-bar {
      position: fixed;
      top: 80px;
      left: 0;
      right: 0;
      background-color: #1976d2;
      padding: 6px 20px;
      display: flex;
      justify-content: center;
      gap: 10px;
      z-index: 1000;
    }
    .control-bar button {
      background-color: #1976d2;
      color: #fff;
      border: none;
      padding: 6px 12px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
    #clientFileDropdown, #menuDropdown {
      display: none;
      position: absolute;
      background-color: #fff;
      border: 1px solid #ccc;
      padding: 10px;
      z-index: 2000;
      width: 220px;
    }
    #clientFileDropdown ul, #menuDropdown ul {
      list-style: none;
      margin: 0;
      padding: 0;
    }
    #clientFileDropdown li, #menuDropdown li {
      margin: 5px 0;
      cursor: pointer;
      padding: 3px;
    }
    .selected-client {
      background-color: #e0f7fa;
    }
    .remove-client {
      color: red;
      margin-left: 10px;
      cursor: pointer;
    }
    #accountList {
      margin: 10px 0;
      padding: 10px;
      background-color: #f7f7f7;
      border: 1px solid #ddd;
      border-radius: 6px;
    }
    #totalAccounts {
      font-size: 14px;
      font-weight: bold;
      margin-bottom: 5px;
    }
    #accountButtons {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    #accountButtons button {
      background-color: #1976d2;
      border: none;
      color: #fff;
      cursor: pointer;
      font-size: 14px;
      padding: 6px 10px;
      border-radius: 4px;
    }
    #downloadAllProfilesBtn {
      background-color: #FF5722;
      border: none;
      color: #fff;
      cursor: pointer;
      font-size: 14px;
      padding: 6px 10px;
      border-radius: 4px;
      margin-top: 10px;
    }
    footer {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background-color: #00695c;
      color: #fff;
      text-align: center;
      padding: 10px;
      border-top: 1px solid #4db6ac;
      font-size: 14px;
      z-index: 1000;
    }
    main {
      position: absolute;
      top: 130px;
      bottom: 50px;
      left: 0;
      right: 0;
      overflow-y: auto;
      padding: 15px;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background-color: #fff;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      padding: 20px;
    }
    .modal {
      display: none;
      position: fixed;
      z-index: 2000;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      justify-content: center;
      align-items: center;
    }
    .modal-content {
      background: #fff;
      padding: 20px;
      border-radius: 8px;
      width: 90%;
      max-width: 400px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
      max-height: 90vh;
      overflow-y: auto;
    }
    .modal-content h2 {
      margin-top: 0;
      font-size: 20px;
      color: #333;
    }
    .modal-content .form-group {
      margin-bottom: 15px;
    }
    .modal-content button {
      background-color: #00897b;
      color: #fff;
      border: none;
      padding: 10px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
    }
    .modal-content button:hover {
      background-color: #00796b;
    }
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #333;
    }
    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #81d4fa;
      border-radius: 4px;
      font-size: 16px;
    }
    .profile-button-group {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }
    .profile-button-group button {
      font-size: 12px;
      padding: 4px 8px;
      flex: 1;
    }
    .output {
      margin-top: 25px;
      padding: 25px;
      background-color: #e0f2f1;
      border-radius: 10px;
      border: 1px solid #b2dfdb;
    }
    .output-card {
      border: 1px solid #d1c4e9;
      background-color: #ede7f6;
      padding: 20px;
      margin-bottom: 20px;
      border-radius: 10px;
      overflow: hidden;
    }
    .card-profile {
      margin-bottom: 20px;
      font-size: 14px;
    }
    .profile-description-box {
      border: 1px solid #ddd;
      padding: 5px;
      margin-top: 5px;
      font-size: 12px;
      color: #555;
    }
    .entry-table {
      width: 100%;
      margin-bottom: 20px;
      display: block;
    }
    .entry-table table {
      width: 100%;
      max-width: 100%;
      border-collapse: collapse;
      background-color: #fff;
      border: 1px solid #81d4fa;
      border-radius: 8px;
      table-layout: fixed;
      font-size: 14px;
      overflow: hidden;
    }
    .entry-table th,
    .entry-table td {
      padding: 8px;
      border: 1px solid #81d4fa;
      text-align: left;
      white-space: normal;
      word-wrap: break-word;
      overflow: hidden;
      text-overflow: ellipsis;
      font-size: 14px;
    }
    .entry-table th {
      background-color: #0288d1;
      color: #fff;
      font-weight: 600;
      width: 30%;
    }
    .entry-table td {
      width: 70%;
    }
    .description-box {
      margin-top: 20px;
      padding: 10px;
      background-color: #f3e5f5;
      border: 1px solid #d1c4e9;
      border-radius: 6px;
      font-size: 14px;
      line-height: 1.5;
      white-space: pre-line;
    }
    .card-buttons {
      margin-top: 15px;
      display: flex;
      gap: 10px;
    }
    .card-buttons button {
      flex: 1;
      padding: 10px;
      background-color: #1976d2;
      border: none;
      border-radius: 6px;
      color: #fff;
      font-weight: bold;
      cursor: pointer;
      text-transform: uppercase;
      font-size: 14px;
    }
    .card-buttons button:hover {
      background-color: #1565c0;
    }
    #outputContainer {
      animation: slideIn 1s ease-out;
    }
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    #backupModal, #iconUploadModal {
      display: none;
      position: fixed;
      z-index: 2000;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      justify-content: center;
      align-items: center;
    }
    #backupModal .modal-content textarea {
      width: 100%;
      height: 300px;
      resize: none;
    }
  </style>
</head>
<body>
  <!-- Header -->
  <header>
    <div class="header-box" id="headerBox">
      <div class="header-left">
        <div class="logo-preview" id="headerLogo"></div>
        <div class="text-content">
          <h1 id="headerTitle">Khan Ka Samsi Noori Zahangir</h1>
          <p id="headerSubtitle">Sipahi Baba Ruhani Alaaj</p>
        </div>
      </div>
    </div>
    <!-- Control Bar with Menu Button -->
    <div class="control-bar">
      <button class="profile-btn" id="profileButton">Profile</button>
      <button class="add-entry-btn" id="addEntryControlButton" onclick="openEntryModal()">Add Entry</button>
      <button class="client-file-btn" id="clientFileButton" onclick="toggleClientFileDropdown()">Create Account</button>
      <button class="menu-btn" id="menuButton" onclick="toggleMenuDropdown()">Menu</button>
      <button class="install-btn" onclick="installApp()">Install App</button>
    </div>
  </header>
  
  <!-- Create Account Dropdown -->
  <div id="clientFileDropdown"></div>
  
  <!-- Menu Dropdown -->
  <div id="menuDropdown">
    <ul>
      <li onclick="logoFileInput.click()">Upload Logo</li>
      <li onclick="openIconUploadModal()">Upload App Icons</li>
      <li onclick="showBackupModal()">Backup Data</li>
    </ul>
  </div>
  
  <!-- Main Content -->
  <main>
    <div class="container">
      <div id="accountList">
        <div id="totalAccounts" style="font-size:14px; font-weight:bold;"></div>
        <div id="accountButtons" style="display:flex; gap:10px; flex-wrap:wrap;"></div>
        <div style="margin-top:10px;">
          <button id="downloadAllProfilesBtn" onclick="downloadAllProfiles()" style="background-color:#FF5722;">Download All Profiles</button>
        </div>
      </div>
      <div class="output" id="outputSection">
        <div id="outputContainer"></div>
      </div>
    </div>
  </main>
  
  <!-- Footer -->
  <footer>
    Â© 2025 Khan Ka Samsi Noori Zahangir. All Rights Reserved.
  </footer>
  
  <!-- Profile Modal -->
  <div id="profileModal" class="modal">
    <div class="modal-content">
      <h2 id="modalHeader">Update Profile</h2>
      <div class="form-group">
        <label id="formNameLabel" for="modalName">Name:</label>
        <input type="text" id="modalName" name="modalName" />
      </div>
      <div class="form-group">
        <label id="formMobileLabel" for="modalMobile">Mobile Number:</label>
        <input type="text" id="modalMobile" name="modalMobile" />
      </div>
      <div class="form-group">
        <label id="formAddressLabel" for="modalAddress">Address:</label>
        <input type="text" id="modalAddress" name="modalAddress" />
      </div>
      <div class="form-group">
        <label for="modalDescription">Description:</label>
        <input type="text" id="modalDescription" name="modalDescription" />
      </div>
      <div id="profileExtraContainer"></div>
      <div class="profile-button-group">
        <button type="button" onclick="addProfileExtraColumn()">Add New Column</button>
        <button type="button" onclick="removeProfileExtraColumn()">Remove Column</button>
        <button type="button" onclick="saveProfile()">Update Profile</button>
      </div>
    </div>
  </div>
  
  <!-- Entry Modal -->
  <div id="entryModal" class="modal">
    <div class="modal-content">
      <h2>Add Entry</h2>
      <div class="form-group">
        <label id="dateLabel" for="date">Date:</label>
        <input type="date" id="date" name="date" />
      </div>
      <div class="form-group">
        <label id="feesLabel" for="fees">Fees (INR):</label>
        <input type="number" id="fees" name="fees" step="0.01" />
      </div>
      <div id="defaultColumnsContainer"></div>
      <div id="extraColumnsContainer"></div>
      <div class="form-group" style="display: flex; gap: 10px;">
        <button type="button" id="submitEntryButton" onclick="submitEntryModal()">Submit Entry</button>
        <button type="button" id="addColumnButton" onclick="addColumn()">Add Column</button>
        <button type="button" id="removeColumnButton" onclick="removeLastExtraColumn()">Remove Column</button>
        <button type="button" id="cancelEntryButton" onclick="closeEntryModal()">Cancel</button>
      </div>
    </div>
  </div>
  
  <!-- Backup Modal -->
  <div id="backupModal" class="modal">
    <div class="modal-content">
      <h2>Backup Client Data</h2>
      <div class="form-group">
        <label for="backupData">Client Data (JSON):</label>
        <textarea id="backupData" readonly></textarea>
      </div>
      <button type="button" onclick="downloadBackup()">Download Backup</button>
      <button type="button" onclick="closeBackupModal()">Close</button>
    </div>
  </div>
  
  <!-- Icon Upload Modal -->
  <div id="iconUploadModal" class="modal">
    <div class="modal-content">
      <h2>Upload App Icons</h2>
      <div class="form-group">
        <label for="icon192">192x192 Icon:</label>
        <input type="file" id="icon192" accept="image/*" />
      </div>
      <div class="form-group">
        <label for="icon512">512x512 Icon:</label>
        <input type="file" id="icon512" accept="image/*" />
      </div>
      <div class="form-group" style="display: flex; gap: 10px;">
        <button type="button" onclick="saveIcons()">Save Icons</button>
        <button type="button" onclick="closeIconUploadModal()">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
  <script>
    // PWA Setup
    let deferredPrompt;
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      deferredPrompt = e;
      document.querySelector('.install-btn').style.display = 'inline-block';
    });

    function installApp() {
      if (deferredPrompt) {
        deferredPrompt.prompt();
        deferredPrompt.userChoice.then((choiceResult) => {
          if (choiceResult.outcome === 'accepted') {
            console.log('User accepted the install prompt');
          } else {
            console.log('User dismissed the install prompt');
          }
          deferredPrompt = null;
        });
      } else {
        alert('App installation is not available at this moment.');
      }
    }

    const langData = {
      English: {
        headerTitle: "Khan Ka Samsi Noori Zahangir",
        headerSubtitle: "Sipahi Baba Ruhani Centre",
        modalHeader: "Update Profile",
        formNameLabel: "Name:",
        formMobileLabel: "Mobile Number:",
        formAddressLabel: "Address:",
        profileUpdateButton: "Update Profile",
        dateLabel: "Date:",
        feesLabel: "Fees (INR):",
        defaultColumns: [
          { key: "pina", label: "Pina" },
          { key: "chita", label: "Chita" },
          { key: "falita", label: "Falita" },
          { key: "jalana", label: "Jalana" }
        ],
        addEntryButton: "Add Entry",
        addColumnButton: "Add Column",
        removeColumnButton: "Remove Column",
        removePageButton: "Remove Page",
        downloadPDFButton: "Download PDF",
        descriptionText: "<div style='text-align: center;'><strong>Piro Murshid Sanadul Aliya</strong><br>Hazrat Khwaja Sufi Shamsuddin Shah Rahmatullah Alaihi</div><br><div style='text-align: center;'><strong>Sahib-e-Sajjada Gaddi Nasheen</strong><br>Hazrat Sufi Mohammad Hasan Shah Shamsi Sanai Hasani Noori Chishi Qadri</div><br><div style='text-align: center; font-size: 12px;'><span style='font-size:12px;'>ð± 9984405085</span>  |  <span style='font-size:12px;'>âï¸ sipahibabatv@gmail.com</span>  |  <span style='font-size:12px;'>â¶ï¸ Sipahi Baba Tv</span></div>"
      }
    };

    let currentLang = "English";
    let defaultColumns = langData[currentLang].defaultColumns.slice();
    let extraColumns = [];
    let entries = [];
    let cardCounter = 0;
    let profileHTML = "";
    let profileExtraFields = [];
    
    function updateProfileExtraFields() {
      let container = document.getElementById('profileExtraContainer');
      container.innerHTML = "";
      profileExtraFields.forEach(function(field) {
        container.innerHTML += `<div class="form-group">
          <label for="profile_extra_${field}">${field}:</label>
          <input type="text" id="profile_extra_${field}" name="profile_extra_${field}" />
        </div>`;
      });
    }
    function addProfileExtraColumn() {
      let colName = prompt("Enter new profile column name:");
      if (colName && !profileExtraFields.includes(colName)) {
        profileExtraFields.push(colName);
        updateProfileExtraFields();
      } else {
        alert("Column already exists or invalid name.");
      }
    }
    function removeProfileExtraColumn() {
      if (profileExtraFields.length > 0) {
        profileExtraFields.pop();
        updateProfileExtraFields();
      } else {
        alert("No extra columns to remove.");
      }
    }
    
    let accountProfiles = {};
    let clientFiles = {};
    let currentClientFile = null;
    
    function loadClientFilesFromStorage() {
      const stored = localStorage.getItem("clientFiles");
      if (stored) { clientFiles = JSON.parse(stored); }
      const storedCurrent = localStorage.getItem("currentClientFile");
      if (storedCurrent) { currentClientFile = storedCurrent; }
    }
    function updateClientFilesStorage() {
      localStorage.setItem("clientFiles", JSON.stringify(clientFiles));
      if (currentClientFile) { localStorage.setItem("currentClientFile", currentClientFile); }
      else { localStorage.removeItem("currentClientFile"); }
    }
    function toggleClientFileDropdown() {
      const dropdown = document.getElementById('clientFileDropdown');
      if (dropdown.style.display === 'none' || dropdown.style.display === '') {
        updateClientFileDropdown();
        dropdown.style.display = 'block';
        const btn = document.getElementById('clientFileButton');
        const rect = btn.getBoundingClientRect();
        dropdown.style.top = (rect.bottom + window.scrollY) + 'px';
        dropdown.style.left = (rect.left + window.scrollX) + 'px';
      } else {
        dropdown.style.display = 'none';
      }
    }
    function updateClientFileDropdown() {
      const dropdown = document.getElementById('clientFileDropdown');
      let html = '<button onclick="addNewClientFile()">Create New Account</button><br/><br/>';
      html += '<ul>';
      for (let file in clientFiles) {
        html += '<li onclick="selectClientFile(\'' + file + '\')" ' + (currentClientFile === file ? 'class="selected-client"' : '') + '>' + file;
        html += ' <span class="remove-client" onclick="event.stopPropagation(); removeClientFile(\'' + file + '\')">â</span>';
        html += '</li>';
      }
      html += '</ul>';
      if (currentClientFile) {
        html += '<br/><button onclick="downloadClientPDF()">Download Account</button>';
      }
      dropdown.innerHTML = html;
      updateAccountList();
    }
    function addNewClientFile() {
      let fileName = prompt("Enter new account name:");
      if (fileName && !clientFiles[fileName]) {
        clientFiles[fileName] = [];
        currentClientFile = fileName;
        updateClientFilesStorage();
        updateClientFileDropdown();
      } else if (clientFiles[fileName]) {
        alert("An account with this name already exists.");
      }
    }
    function selectClientFile(fileName) {
      currentClientFile = fileName;
      updateClientFilesStorage();
      updateClientFileDropdown();
      loadClientFileOutput();
      document.getElementById('clientFileDropdown').style.display = 'none';
    }
    function removeClientFile(fileName) {
      if (confirm("Are you sure you want to remove the account: " + fileName + "?")) {
        delete clientFiles[fileName];
        delete accountProfiles[fileName];
        if (currentClientFile === fileName) {
          currentClientFile = null;
          document.getElementById('outputContainer').innerHTML = "";
        }
        updateClientFilesStorage();
        updateClientFileDropdown();
      }
    }
    function loadClientFileOutput() {
      const outputContainer = document.getElementById('outputContainer');
      outputContainer.innerHTML = "";
      if (currentClientFile && clientFiles[currentClientFile]) {
        clientFiles[currentClientFile].forEach(html => {
          outputContainer.insertAdjacentHTML('beforeend', html);
        });
      }
    }
    function updateAccountList() {
      const accountListDiv = document.getElementById('accountList');
      let total = Object.keys(clientFiles).length;
      let html = "<h3 style='margin:0; padding:0;'>Total Accounts: " + total + "</h3>";
      html += `<div id="accountButtons" style="display:flex; gap:10px; flex-wrap:wrap;">`;
      for (let file in clientFiles) {
        let count = clientFiles[file].length;
        html += `<button onclick="selectClientFile('${file}')">${file} (${count})</button>`;
      }
      html += `</div>`;
      html += `<div style="margin-top:10px;">
                <button id="downloadAllProfilesBtn" onclick="downloadAllProfiles()" style="background-color:#FF5722;">Download All Profiles</button>
              </div>`;
      accountListDiv.innerHTML = html;
    }
    function downloadAllProfiles() {
      if (Object.keys(accountProfiles).length === 0) {
        alert("No profile information available for any account.");
        return;
      }
      let tempDiv = document.createElement("div");
      tempDiv.style.width = "800px";
      for (let account in accountProfiles) {
        tempDiv.innerHTML += `<h3>${account}</h3>` + accountProfiles[account] + "<hr/>";
      }
      document.body.appendChild(tempDiv);
      const { jsPDF } = window.jspdf;
      html2canvas(tempDiv, { scale: 2 }).then(canvas => {
        let pdf = new jsPDF('p', 'mm', 'a4');
        let pageWidth = pdf.internal.pageSize.getWidth();
        let pageHeight = pdf.internal.pageSize.getHeight();
        let imgData = canvas.toDataURL('image/png');
        let imgWidth = canvas.width;
        let imgHeight = canvas.height;
        let scaleFactor = Math.min(pageWidth / imgWidth, pageHeight / imgHeight);
        let pdfWidth = imgWidth * scaleFactor;
        let pdfHeight = imgHeight * scaleFactor;
        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
        pdf.save("all_profiles.pdf");
        document.body.removeChild(tempDiv);
      });
    }
    function toggleMenuDropdown() {
      const dropdown = document.getElementById('menuDropdown');
      if (dropdown.style.display === 'none' || dropdown.style.display === '') {
        dropdown.style.display = 'block';
        const btn = document.getElementById('menuButton');
        const rect = btn.getBoundingClientRect();
        dropdown.style.top = (rect.bottom + window.scrollY) + 'px';
        dropdown.style.left = (rect.left + window.scrollX) + 'px';
      } else {
        dropdown.style.display = 'none';
      }
    }
    document.addEventListener('click', function(e) {
      const clientDropdown = document.getElementById('clientFileDropdown');
      const clientFileButton = document.getElementById('clientFileButton');
      const menuDropdown = document.getElementById('menuDropdown');
      const menuButton = document.getElementById('menuButton');
      if (clientDropdown.style.display === 'block' && !clientDropdown.contains(e.target) && e.target !== clientFileButton) {
        clientDropdown.style.display = 'none';
      }
      if (menuDropdown.style.display === 'block' && !menuDropdown.contains(e.target) && e.target !== menuButton) {
        menuDropdown.style.display = 'none';
      }
    });

    const logoFileInput = document.createElement('input');
    logoFileInput.type = 'file';
    logoFileInput.accept = 'image/*';
    logoFileInput.style.display = 'none';
    document.body.appendChild(logoFileInput);
    logoFileInput.addEventListener('change', function(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          document.getElementById('headerLogo').innerHTML = `<img src="${e.target.result}" alt="Logo">`;
          localStorage.setItem('logo', e.target.result);
        };
        reader.readAsDataURL(file);
      }
      document.getElementById('menuDropdown').style.display = 'none';
    });

    function updateManifest() {
      const manifest = {
        "name": "Khan Ka Samsi Noori Zahangir",
        "short_name": "Noori Zahangir",
        "start_url": ".",
        "display": "standalone",
        "background_color": "#ffebee",
        "theme_color": "#00695c",
        "icons": [
          {
            "src": localStorage.getItem('icon192') || "/icon-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
          },
          {
            "src": localStorage.getItem('icon512') || "/icon-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
          }
        ]
      };
      const stringManifest = JSON.stringify(manifest);
      const blob = new Blob([stringManifest], {type: 'application/json'});
      const manifestURL = URL.createObjectURL(blob);
      document.querySelector('link[rel="manifest"]').setAttribute('href', manifestURL);
    }

    function openIconUploadModal() {
      document.getElementById('iconUploadModal').style.display = 'flex';
      document.getElementById('menuDropdown').style.display = 'none';
    }

    function closeIconUploadModal() {
      document.getElementById('iconUploadModal').style.display = 'none';
      document.getElementById('icon192').value = '';
      document.getElementById('icon512').value = '';
    }

    function saveIcons() {
      const icon192File = document.getElementById('icon192').files[0];
      const icon512File = document.getElementById('icon512').files[0];

      if (!icon192File || !icon512File) {
        alert('Please upload both 192x192 and 512x512 icons.');
        return;
      }

      const reader192 = new FileReader();
      const reader512 = new FileReader();

      reader192.onload = function(e) {
        localStorage.setItem('icon192', e.target.result);
        if (reader512.result) {
          updateManifest();
          closeIconUploadModal();
        }
      };

      reader512.onload = function(e) {
        localStorage.setItem('icon512', e.target.result);
        if (reader192.result) {
          updateManifest();
          closeIconUploadModal();
        }
      };

      reader192.readAsDataURL(icon192File);
      reader512.readAsDataURL(icon512File);
    }

    window.addEventListener('click', function(e) {
      if (e.target === document.getElementById('iconUploadModal')) {
        closeIconUploadModal();
      }
    });

    function updateLanguage() {
      const data = langData[currentLang];
      document.getElementById('headerTitle').innerText = data.headerTitle;
      document.getElementById('headerSubtitle').innerText = data.headerSubtitle;
      document.getElementById('dateLabel').innerText = data.dateLabel;
      document.getElementById('feesLabel').innerText = data.feesLabel;
      defaultColumns = data.defaultColumns.slice();
      updateDefaultColumnsForm();
      document.getElementById('addColumnButton').innerText = data.addColumnButton;
      document.getElementById('removeColumnButton').innerText = data.removeColumnButton;
    }

    const profileModal = document.getElementById('profileModal');
    document.getElementById('profileButton').addEventListener('click', function() {
      profileModal.style.display = 'flex';
    });
    function saveProfile() {
      const data = langData[currentLang];
      const name = document.getElementById('modalName').value;
      const mobile = document.getElementById('modalMobile').value;
      const address = document.getElementById('modalAddress').value;
      const description = document.getElementById('modalDescription').value;
      profileHTML = `
        <p style="font-size:12px;"><strong>${data.formNameLabel}</strong> ${name}</p>
        <p style="font-size:12px;"><strong>${data.formMobileLabel}</strong> ${mobile}</p>
        <p style="font-size:12px;"><strong>${data.formAddressLabel}</strong> ${address}</p>
        <div class="profile-description-box">${description}</div>
      `;
      profileExtraFields.forEach(function(field) {
        let value = document.getElementById("profile_extra_" + field).value;
        profileHTML += `<p style="font-size:12px;"><strong>${field}:</strong> ${value}</p>`;
      });
      profileModal.style.display = 'none';
      document.querySelectorAll('.output-card .card-profile').forEach(el => el.innerHTML = profileHTML);
      if (currentClientFile) {
        accountProfiles[currentClientFile] = profileHTML;
      }
    }
    window.addEventListener('click', function(e) {
      if (e.target === profileModal) {
        profileModal.style.display = 'none';
      }
    });

    function updateDefaultColumnsForm() {
      const container = document.getElementById('defaultColumnsContainer');
      container.innerHTML = "";
      defaultColumns.forEach(col => {
        container.innerHTML += `
          <div class="form-group" data-default-col="${col.key}">
            <label for="default_${col.key}">${col.label} <span class="remove-extra" onclick="removeDefaultColumn('${col.key}')">â</span></label>
            <input type="text" id="default_${col.key}" name="default_${col.key}" />
          </div>
        `;
      });
    }
    function updateExtraColumnsForm() {
      const container = document.getElementById('extraColumnsContainer');
      container.innerHTML = "";
      extraColumns.forEach(colName => {
        container.innerHTML += `
          <div class="form-group" data-extra-col="${colName}">
            <label for="extra_${colName}">${colName} <span class="remove-extra" onclick="removeExtraColumn('${colName}')">â</span></label>
            <input type="text" id="extra_${colName}" name="extra_${colName}" />
          </div>
        `;
      });
    }
    function removeDefaultColumn(key) {
      defaultColumns = defaultColumns.filter(col => col.key !== key);
      updateDefaultColumnsForm();
    }
    function removeExtraColumn(colName) {
      extraColumns = extraColumns.filter(col => col !== colName);
      updateExtraColumnsForm();
    }
    function addColumn() {
      let colName = prompt("Enter column name:");
      if (colName) {
        if (!extraColumns.includes(colName) && !defaultColumns.some(col => col.label.includes(colName))) {
          extraColumns.push(colName);
          updateExtraColumnsForm();
          document.querySelector("#entryModal .modal-content").scrollTop = 0;
        } else {
          alert("Column already exists.");
        }
      }
    }
    function removeLastExtraColumn() {
      if (extraColumns.length > 0) {
        extraColumns.pop();
        updateExtraColumnsForm();
      } else {
        alert("No extra columns to remove.");
      }
    }
    updateDefaultColumnsForm();
    updateLanguage();

    function openEntryModal() {
      document.getElementById('entryModal').style.display = 'flex';
    }
    function closeEntryModal() {
      document.getElementById('entryModal').style.display = 'none';
    }
    function submitEntryModal() {
      addEntry();
      closeEntryModal();
    }
    function addEntry() {
      const entry = {};
      entry.date = document.getElementById('date').value;
      entry.fees = document.getElementById('fees').value;
      defaultColumns.forEach(col => {
        entry[col.key] = document.getElementById("default_" + col.key)?.value || "";
      });
      extraColumns.forEach(colName => {
        entry[colName] = document.getElementById("extra_" + colName)?.value || "";
      });
      let valid = entry.date && defaultColumns.every(col => entry[col.key].trim() !== "");
      if (valid) {
        entries.push(entry);
        cardCounter++;
        createOutputCard(entry, cardCounter);
        if (currentClientFile) {
          let cardElem = document.getElementById("outputCard_" + cardCounter);
          clientFiles[currentClientFile].push(cardElem.outerHTML);
          updateClientFilesStorage();
          updateAccountList();
        }
        document.getElementById('date').value = "";
        document.getElementById('fees').value = "";
        defaultColumns.forEach(col => {
          document.getElementById("default_" + col.key).value = "";
        });
        extraColumns.forEach(colName => {
          document.getElementById("extra_" + colName).value = "";
        });
      } else {
        alert('Please fill in all fields');
      }
    }
    function generateOutputTableRow(field, value) {
      return `<tr>
                <td>${field}</td>
                <td>${value}</td>
              </tr>`;
    }
    function createOutputCard(entry, cardId) {
      const data = langData[currentLang];
      const logo = localStorage.getItem('logo') || '';
      let cardHTML = `<div class="output-card" id="outputCard_${cardId}">
        <div class="card-content">
          <div class="header-box" style="background-color: #00695c; padding: 10px; border-radius: 8px;">
            ${logo ? `<div class="logo-preview"><img src="${logo}" alt="Logo"></div>` : ''}
            <div class="text-content">
              <h1>${data.headerTitle}</h1>
              <p>${data.headerSubtitle}</p>
            </div>
          </div>
          <div class="card-profile">
            ${profileHTML}
          </div>
          <div class="entry-table">
            <table>
              <thead>
                <tr>
                  <th>Taabiz</th>
                  <th>description</th>
                </tr>
              </thead>
              <tbody>
                ${generateOutputTableRow("Date", entry.date)}
                ${generateOutputTableRow(data.feesLabel, entry.fees)}
      `;
      defaultColumns.forEach(col => {
        cardHTML += generateOutputTableRow(col.label, entry[col.key]);
      });
      extraColumns.forEach(colName => {
        cardHTML += generateOutputTableRow(colName, entry[colName]);
      });
      cardHTML += `</tbody>
            </table>
          </div>
          <div class="description-box">
            <p>${data.descriptionText}</p>
          </div>
          <div class="card-buttons">
            <button onclick="removeCard('outputCard_${cardId}')">${data.removePageButton}</button>
            <button onclick="downloadPDFCard('outputCard_${cardId}')">${data.downloadPDFButton}</button>
          </div>
        </div>
      </div>`;
      document.getElementById('outputContainer').insertAdjacentHTML('beforeend', cardHTML);
    }
    function removeCard(cardId) {
      const card = document.getElementById(cardId);
      if (card) card.remove();
    }
    function downloadPDFCard(cardId) {
      const { jsPDF } = window.jspdf;
      const card = document.getElementById(cardId);
      const cardButtons = card.querySelector('.card-buttons');
      const originalDisplay = cardButtons.style.display;
      cardButtons.style.display = 'none';
      html2canvas(card, { scale: 2 }).then(canvas => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4');
        const pageWidth = pdf.internal.pageSize.getWidth();
        const pageHeight = pdf.internal.pageSize.getHeight();
        const imgWidth = canvas.width;
        const imgHeight = canvas.height;
        const scaleFactor = Math.min(pageWidth / imgWidth, pageHeight / imgHeight);
        const pdfWidth = imgWidth * scaleFactor;
        const pdfHeight = imgHeight * scaleFactor;
        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
        pdf.save('spiritual-healing-report.pdf');
        cardButtons.style.display = originalDisplay;
      });
    }
    async function downloadClientPDF() {
      if (!currentClientFile) {
        alert("Please select an account.");
        return;
      }
      let cards = clientFiles[currentClientFile];
      if (!cards || cards.length === 0) {
        alert("No output pages in the selected account.");
        return;
      }
      const { jsPDF } = window.jspdf;
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let tempDiv = document.createElement("div");
      tempDiv.style.width = "800px";
      tempDiv.style.position = "absolute";
      tempDiv.style.top = "-9999px";
      document.body.appendChild(tempDiv);
      for (let i = 0; i < cards.length; i++) {
        tempDiv.innerHTML = cards[i];
        let btns = tempDiv.querySelectorAll('.card-buttons');
        btns.forEach(btn => btn.remove());
        const canvas = await html2canvas(tempDiv, { scale: 2 });
        const imgData = canvas.toDataURL('image/png');
        const imgWidth = canvas.width;
        const imgHeight = canvas.height;
        const scaleFactor = Math.min(pageWidth / imgWidth, pageHeight / imgHeight);
        const pdfWidth = imgWidth * scaleFactor;
        const pdfHeight = imgHeight * scaleFactor;
        if (i > 0) pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
      }
      pdf.save(currentClientFile + '-report.pdf');
      document.body.removeChild(tempDiv);
    }

    function showBackupModal() {
      const backupModal = document.getElementById('backupModal');
      const backupData = document.getElementById('backupData');
      const data = {
        clientFiles: clientFiles,
        accountProfiles: accountProfiles,
        logo: localStorage.getItem('logo'),
        icon192: localStorage.getItem('icon192'),
        icon512: localStorage.getItem('icon512')
      };
      backupData.value = JSON.stringify(data, null, 2);
      backupModal.style.display = 'flex';
      document.getElementById('menuDropdown').style.display = 'none';
    }
    function closeBackupModal() {
      document.getElementById('backupModal').style.display = 'none';
    }
    function downloadBackup() {
      const backupData = document.getElementById('backupData').value;
      const blob = new Blob([backupData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'client_data_backup.json';
      a.click();
      URL.revokeObjectURL(url);
    }
    window.addEventListener('click', function(e) {
      if (e.target === document.getElementById('backupModal')) {
        closeBackupModal();
      }
    });

    window.addEventListener('load', function() {
      if (localStorage.getItem('logo')) {
        document.getElementById('headerLogo').innerHTML = `<img src="${localStorage.getItem('logo')}" alt="Logo">`;
      }
      if (localStorage.getItem('title')) {
        document.getElementById('headerTitle').innerText = localStorage.getItem('title');
      }
      loadClientFilesFromStorage();
      updateClientFileDropdown();
      updateAccountList();
      updateManifest();
    });

    if ('serviceWorker' in navigator) {
      window.addEventListener('load', function() {
        navigator.serviceWorker.register('/service-worker.js')
          .then(function(registration) {
            console.log('Service Worker registered with scope:', registration.scope);
          }, function(error) {
            console.log('Service Worker registration failed:', error);
          });
      });
    }
  </script>
</body>
</html>